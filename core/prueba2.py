import json
import re
from .chatbots import generar_info_adicional
from .config import client, client_PEDRO
from pymed import PubMed
# üìå Texto de prueba
prompt  = """El paciente Carlos Garc√≠a, de 22 a√±os, ingres√≥ en la UCI el 20/09/2023 por los siguientes motivos:

Polidipsia
Poliuria
V√≥mitos
Confusi√≥n
Estos s√≠ntomas, junto con la deshidrataci√≥n severa y la respiraci√≥n de Kussmaul observadas al ingreso, son indicativos de una cetoacidosis diab√©tica (CAD) en el contexto de una diabetes mellitus tipo 1 mal controlada.

Los tratamientos implementados para abordar esta emergencia metab√≥lica fueron:

Fluidoterapia intravenosa: Se administr√≥ suero fisiol√≥gico 1000 ml por v√≠a intravenosa r√°pida para corregir la deshidrataci√≥n severa.

Insulinoterapia:

Insulina regular en perfusi√≥n intravenosa continua a 0.1 U/kg/h para reducir la hiperglucemia y la cetosis.
Insulina glargina 20 U subcut√°nea nocturna como terapia basal.
Correcci√≥n de electrolitos:

Cloruro de potasio 20 mEq intravenoso cada 4 horas para prevenir la hipopotasemia.
Bicarbonato de sodio 50 mEq intravenoso en dosis √∫nica para corregir la acidosis metab√≥lica severa (pH 7.1).
Monitorizaci√≥n estrecha: Se coloc√≥ un cat√©ter venoso central para facilitar la administraci√≥n de fluidos y medicamentos, as√≠ como para el control hemodin√°mico en la UCI.

Evaluaci√≥n continua: Se realizaron controles seriados de glucemia, electrolitos y gases arteriales para ajustar el tratamiento.

Manejo de complicaciones: Se realiz√≥ una radiograf√≠a de t√≥rax para descartar infecciones pulmonares como factor precipitante de la CAD.

Este abordaje terap√©utico multifac√©tico est√° dise√±ado para corregir la hiperglucemia, la cetoacidosis, los desequilibrios electrol√≠ticos y la deshidrataci√≥n, que son las alteraciones fisiopatol√≥gicas fundamentales en la CAD. El objetivo es estabilizar al paciente y prevenir las complicaciones potencialmente mortales asociadas a esta condici√≥n."""

import json
import re
from pymed import PubMed
from .config import client, client_PEDRO

# üìå Funci√≥n para generar y limpiar palabras clave
def generar_y_limpiar_palabras_clave(promptInput):
    """
    Genera palabras clave m√©dicas en base al prompt de entrada y limpia la salida
    para asegurar que sea un JSON v√°lido.
    """
    prompt = f"""Eres un agente especializado en generar palabras clave m√©dicas relevantes 
    para b√∫squedas en bases de datos como PubMed. 
    Tu tarea es devolver √∫nicamente palabras clave relevantes en formato JSON para el siguiente texto , elige solo las 5 palabras clave m√°s relevantes y devuelvelas en INGL√âS:
    
    {promptInput}
    
    **Formato de respuesta JSON esperado:** 
    {{
      "palabras_clave": ["t√©rmino1", "t√©rmino2", "t√©rmino3"]
    }}
    
    No devuelvas explicaciones, solo el JSON v√°lido.
    """

    try:
        completion = client_PEDRO.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        response_text = completion.choices[0].message.content.strip()
        return limpiar_json(response_text)  # Llamamos a limpiar_json antes de cargar el JSON
    except Exception as e:
        print(f"Error en la API de generaci√≥n de palabras clave: {e}")
        return {"palabras_clave": []}

# ‚úÖ Funci√≥n para limpiar JSON
def limpiar_json(response_text):
    """
    Extrae solo el bloque JSON de un texto con posibles caracteres adicionales.
    """
    try:
        match = re.search(r'\{.*\}', response_text, re.DOTALL)
        if match:
            json_text = match.group(0)
            return json.loads(json_text)  # Intentar parsear JSON
        else:
            raise ValueError("No se encontr√≥ un JSON v√°lido en la respuesta.")
    except json.JSONDecodeError as e:
        print(f"Error al decodificar JSON: {e}")
        return {"palabras_clave": []}

# ‚úÖ Funci√≥n para buscar en PubMed usando pyMed
def obtener_info_pubmed(palabras_clave, max_results=4):
    """
    Realiza una consulta a PubMed usando pymed con las palabras clave y devuelve t√≠tulos y enlaces a art√≠culos relevantes.
    """
    pubmed = PubMed(tool="MedicalAgent", email="thedrakeishere12@gmail.com")  # Configuraci√≥n de pyMed
    print(palabras_clave)
    query = " OR ".join(palabras_clave)  # Construcci√≥n de la query combinando palabras clave con OR
    results = pubmed.query(query, max_results=max_results)  # Ejecutar la consulta

    resultados = []
    for article in results:
        title = article.title if article.title else "T√≠tulo no disponible"
   
    # üìå Extraer solo el primer PubMed ID v√°lido
        pubmed_ids = article.pubmed_id.split(";") if article.pubmed_id else []
        pubmed_ids = [id.strip() for id in pubmed_ids if id.strip().isdigit()]  # Filtrar solo IDs num√©ricos

        if pubmed_ids:  # Verificar que haya al menos un ID v√°lido
            pubmed_id = pubmed_ids[0]  # Tomar solo el primer ID v√°lido
            url = f"https://pubmed.ncbi.nlm.nih.gov/{pubmed_id}"
            resultados.append(f"- [{title}]({url})")

    return resultados if resultados else ["No se encontraron art√≠culos relevantes en PubMed."]

# ‚úÖ Funci√≥n principal que integra el generador de palabras clave con la b√∫squeda en PubMed
def generar_info_adicional(promptInput):
    """
    Genera palabras clave m√©dicas en base al prompt de entrada y obtiene informaci√≥n relevante de PubMed.
    """
    palabras_clave = generar_y_limpiar_palabras_clave(promptInput)  # Obtener palabras clave
    if not palabras_clave["palabras_clave"]:
        return "No se encontraron t√©rminos relevantes."

    # Usar palabras clave para obtener datos de PubMed
    info_pubmed = obtener_info_pubmed(palabras_clave["palabras_clave"])

    # Construcci√≥n del texto final basado en la informaci√≥n obtenida
    texto_info = "**üìö Informaci√≥n relevante encontrada:**\n\n"

    if info_pubmed:
        texto_info += "üîé **PubMed:**\n" + "\n".join(info_pubmed) + "\n\n"

    return texto_info if info_pubmed else "No se encontr√≥ informaci√≥n relevante en PubMed."

print(generar_info_adicional(prompt))

"""'
palabras_clave = ["diabetes mellitus", "cetoacidosis", "insulinoterapia"]
resultados = obtener_info_pubmed(palabras_clave, max_results=5)

print("üîé **Resultados de PubMed:**")
for resultado in resultados:
    print(resultado)
    """